--Parser and compiler to transform a grammar file into a ast using the ast library
--The grammar of the grammar is as follows
-- x ==> y represent syntactic sugar for transformations

$#pragma once
$#include "ast_char.h"
$namespace ast_grammar
${
$  using namespace ast_char;


-- decorators
rep<exp, int min, int max, sep> ::= ast_char::rep<exp, min, max, sep>;
delimited<char start, char escape,char end> ::= ast::_t::token_delimited<start, escape, end>;
list<exp, sep> ::= rep<exp,1,-1,sep>;
concat<exp> ::= ast::_f::concat<exp>;
    --concatenate the string lexemes into a single string

select<exp, int i> ::= ast::_f::select<exp, i>;
    --select the lexeme i from the list

regex<string pattern> ::= ast::_t::token_regex<pattern>;
    --parse the string lexeme as a regex
    --return the whole set of groups and matches

drop<exp> ::= ast::_f::drop<exp>;
    --drop the lexeme from the ast as soon as it's included in a seq

out<exp> ::= ast::_f::out<exp>;
    --pass the lexeme to the current output function

outfnc<exp, fnc> ::= ast::_f::outfnc<exp, fnc>;
    --set the output function to use while processing exp

-- primary operators
character ::= delimited<'\'', '\\', '\''>;
    --should have length exactly 1
    --parse and convert to string in the ast
    --the compiler will use ast_char::token to match

string ::= delimited<'"', '\\', '"'>;
    --parse and convert to string in the ast
    --the compiler will use ast_char::token_string to match the string

re_pattern ::= delimited<'/', '\\', '/'>;
    --parse and convert to string in the ast
    --the compiler will use ast::_re::regex to match the string and select group 0

replace_pattern ::= delimited<'/', '\\', '/'>;
    --parse and convert to string in the ast
    --the compiler will use ast::_rp::replace to perform the replacement

name ::= /[a-zA-Z_][a-zA-Z0-9_]*(::[a-zA-Z_][a-zA-Z0-9_]*)*/;
    --the compiler will use it as a class name

positive_integer ::= /[0-9]+/;
integer ::= /[+-]?[0-9]+/;
hex_number ::= /0x[0-9a-fA-F]+/;
dec_number ::= /[+-]?[0-9]+\.([0-9]+)?/;
number ::= dec_number | hex_number;
comment ::= /--([^\n]*)\n/.#$1#;
S ::= ((/[ \t\n\r]+/ | comment)*).drop;
    -- whitespace and comments
    -- the compiler will ignore them

-- rules
primary ::= name | string | regex | '(' S expression S ')';
argument ::= expression | number;
    --the compiler will use these as template arguments

decorator ::= '.' (name ( '<' S argument.list<(S ',' S)> '>' S )?) | replace_pattern;
decorated ::= primary decorator*;
    -- xxx.yyy<a,b,c> ==> yyy<xxx,a,b,c>
    -- x.y.z          ==> z<y<x>>
    -- x<y> compiles as template instantiation x<y>

factor ::= decorated (/[*?+]/ | '{' S number? (S ',' S (number)?)? S '}')?;
    -- xxx+     ==> xxx.rep<1,-1>
    -- xxx*     ==> xxx.rep<0,-1>
    -- xxx?     ==> xxx.rep<0,1>
    -- xxx{n}   ==> xxx.rep<n,n>
    -- xxx{n,}  ==> xxx.rep<n,-1>
    -- xxx{n,m} ==> xxx.rep<n,m>
    -- xxx{,m}  ==> xxx.rep<0,m>

term ::= factor.list<S>;
    -- the compiler will use ast::_s::seq to concatenate the factors
    -- x y       compiles as    seq<x,y>
    -- x y z     compiles as    seq<x,seq<y,z>>

expression ::= term.list<(S '|' S)>;
    -- the compiler will use ast::_c::choice to select the _first_successful_ term
    -- x | y     compiles as    choice<x,y>
    -- x | y | z compiles as    choice<x,choice<y,z>>

valid_type ::= /([a-zA-Z_][a-zA-Z0-9_]*\s*(<[^>]*>)?\s*(\*|\&|\[\])?)*/;
    -- this regex does not capture all, but should capture most used types
    -- the compiler will use the name as the type in the template
    -- it will use "typename" before if empty

params ::= ( valid_type )? S name;
param_list ::= '<' S param.list<(S ',' S)> S '>';
    -- the compiler will use these as template parameters

rule ::= name ( param_list )? S "::=" S expression S ';';
    -- the compiler will use the name as the class name

copyline ::= /$([^\n]*)\n/.#$1#.out.drop;
grammar ::= S (rule | copyline ).list<S>;

-- the grammar is self-contained, so it can be parsed by itself
$}
